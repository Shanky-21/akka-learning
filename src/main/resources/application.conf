# src/main/resources/application.conf

# Custom dispatcher for blocking I/O operations (from previous lesson)
my-blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 5
    core-pool-size-max = 10
    keep-alive-time = "60s"
  }
  throughput = 1
}

akka {
  loglevel = "DEBUG" // <<< --- VERY IMPORTANT FOR THIS STEP
  log-dead-letters = 10
  log-dead-letters-during-shutdown = off

  # Enable Java serialization for demo purposes (NOT recommended for production)
  actor {
    provider = "cluster" # Essential for enabling clustering
    allow-java-serialization = on
    warn-about-java-serializer-usage = off
  }

  # Note: The akka.actor.deployment block below was for actor names
  # "myBoundedActor" and "myPriorityActor" and was referencing
  # incomplete dispatcher definitions.
  # Since your MailboxDemoApp.scala creates actors named "boundedActor"
  # and "priorityActor" and assigns dispatchers programmatically using
  # .withDispatcher("bounded-mailbox-dispatcher") and
  # .withDispatcher("priority-mailbox-dispatcher"),
  # that deployment block is not affecting these actors.
  # We will define the dispatchers with the names used in the code.
  #
  # If you wanted to use deployment configuration for actors named
  # "boundedActor" and "priorityActor", it would look like:
  # actor.deployment {
  #   "/user/boundedActor": { # Path matches the actor created in MailboxDemoApp
  #     dispatcher = "bounded-mailbox-dispatcher" # Refers to the full dispatcher below
  #   }
  #   "/user/priorityActor": { # Path matches the actor created in MailboxDemoApp
  #     dispatcher = "priority-mailbox-dispatcher" # Refers to the full dispatcher below
  #   }
  # }

  persistence {
    # Use in-memory journal for this demo. NOT FOR PRODUCTION.
    journal.plugin = "akka.persistence.journal.inmem"
    # (Optional) configure the in-memory journal
    journal.inmem {
      class = "akka.persistence.journal.inmem.InmemJournal"
      plugin-dispatcher = "akka.actor.default-dispatcher"
    }

    # Use local snapshot store. NOT FOR PRODUCTION.
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    # (Optional) configure the local snapshot store
    snapshot-store.local {
      class = "akka.persistence.snapshot.local.LocalSnapshotStore"
      plugin-dispatcher = "akka.actor.default-dispatcher"
      dir = "target/snapshots"
    }
  }

  remote {
    artery {
      enabled = on       # Artery is the default and recommended remoting transport
      transport = aeron-udp # Or tcp
      canonical {
        hostname = "127.0.0.1" # Replace with actual IP/hostname accessible by other nodes
        port = 0               # 0 means pick a random available port. Set explicitly for known nodes.
      }
    }
  }

  cluster {
    seed-nodes = [
      "akka://MyClusterSystem@127.0.0.1:2551", # Address of first seed node
      "akka://MyClusterSystem@127.0.0.1:2552"  # Address of second seed node
      # Add more seed nodes if needed
    ]

    # Downing provider configuration (CRITICAL FOR PRODUCTION)
    # Using auto-down is NOT recommended for production.
    # You would typically use a more robust strategy like Split Brain Resolver (SBR)
    # or a static-quorum based strategy.
    # auto-down-unreachable-after = 10s # For demo purposes ONLY.

    # Example for Split Brain Resolver (SBR - Lightbend commercial feature, or use community alternatives)
    # downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    # cluster.split-brain-resolver.active-strategy = keep-majority

    # Roles for this node (optional)
    # roles = ["frontend", "worker"]

    # Minimum number of members before leader considers the cluster viable (before taking actions)
    # min-nr-of-members = 1 # Default, adjust based on your cluster size and downing strategy
  }
}

# Bounded mailbox dispatcher (confirmed working)
bounded-mailbox-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 1
    core-pool-size-max = 2
  }
  mailbox-type = "akka.dispatch.BoundedMailbox"
  mailbox-capacity = 5
  mailbox-push-timeout-time = 10ms
}

# REMOVE any separate 'my-actual-priority-mailbox' block if it exists.
# We will put the mailbox-type directly into the dispatcher config,
# which is the most common and usually correct way.

# Dispatcher configuration for an actor using a PriorityMailbox.
priority-mailbox-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
     core-pool-size-min = 1
     core-pool-size-max = 2
  }
  # This is the standard way to specify the mailbox for this dispatcher.
  # Akka should pick this up, and UnboundedPriorityMailbox has the
  # (Settings, Config) constructor that Akka's Mailboxes utility will use.
  mailbox-type = "akka.dispatch.UnboundedPriorityMailbox"

  # No other mailbox-specific configuration is typically needed here for
  # UnboundedPriorityMailbox when using the default PriorityGenerator,
  # as long as your messages have the `priority: Int` method.
}